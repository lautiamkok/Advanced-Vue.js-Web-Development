'use strict'

// Vue's server-rendering API is exposed under `vue/server-renderer`.
import { basename } from 'node:path'
import { createApp } from './main.js'
import { renderToString } from 'vue/server-renderer'
import { renderHeadToString } from '@vueuse/head'

export async function render (url, manifest, req) {
  // Capture any error on the server side during rending the app to HTML string. For example:
  // renderAppToHtml(urlx, manifest, req) => ReferenceError: urlx is not defined
  try {
    return await renderAppToHtml(url, manifest, req)
  } catch (err) { 
    return await renderAppToHtml(url, manifest, req, err)
  }
}

async function renderAppToHtml (url, manifest, req, err = false) {
  const { app, router, head } = createApp(req)

  if (err) {
    // Set the error on the server side.
    const { error, normalizeError } = useError()
    error.value = normalizeError(err)
  } else {
    // Send the `?error=delete` in the `request` object to the `error` reactive
    // to clear the error on the server side.
    useError(req)
  }

  // set the router to the desired URL before rendering
  await router.push(url)
  await router.isReady()

  // passing SSR context object which will be available via useSSRContext()
  // @vitejs/plugin-vue injects code into a component's setup() that registers
  // itself on ctx.modules. After the render, ctx.modules would contain all the
  // components that have been instantiated during this render call.
  const ctx = {}
  const appHtml = await renderToString(app, ctx)

  // Set HTTP status.
  const statusCode = ctx.statusCode || 200

  // the SSR manifest generated by Vite contains module -> chunk/asset mapping
  // which we can then use to determine what files need to be preloaded for this
  // request.
  const preloadLinks = renderPreloadLinks(ctx.modules, manifest)

  // https://github.com/vueuse/head#ssr-rendering
  const { headTags, htmlAttrs, bodyAttrs, bodyTags } = await renderHeadToString(head)

  // Un-comment to see the log.
  // console.log('entry-server.js statusCode =', statusCode)
  // console.log('entry-server.js appHtml =', appHtml)
  // console.log('-------------------------------')

  return { 
    appHtml, 
    statusCode, 
    ctx,
    preloadLinks, 
    headTags, 
    htmlAttrs, 
    bodyAttrs, 
    bodyTags
  }
}

function renderPreloadLinks (modules, manifest) {
  let links = ''
  const seen = new Set()
  modules.forEach((id) => {
    const files = manifest[id]
    if (files) {
      files.forEach((file) => {
        if (!seen.has(file)) {
          seen.add(file)
          const filename = basename(file)
          if (manifest[filename]) {
            for (const depFile of manifest[filename]) {
              links += renderPreloadLink(depFile)
              seen.add(depFile)
            }
          }
          links += renderPreloadLink(file)
        }
      })
    }
  })
  return links
}

function renderPreloadLink (file) {
  if (file.endsWith('.js')) {
    return `<link rel="modulepreload" crossorigin href="${file}">`
  } else if (file.endsWith('.css')) {
    return `<link rel="stylesheet" href="${file}">`
  } else if (file.endsWith('.woff')) {
    return ` <link rel="preload" href="${file}" as="font" type="font/woff" crossorigin>`
  } else if (file.endsWith('.woff2')) {
    return ` <link rel="preload" href="${file}" as="font" type="font/woff2" crossorigin>`
  } else if (file.endsWith('.gif')) {
    return ` <link rel="preload" href="${file}" as="image" type="image/gif">`
  } else if (file.endsWith('.jpg') || file.endsWith('.jpeg')) {
    return ` <link rel="preload" href="${file}" as="image" type="image/jpeg">`
  } else if (file.endsWith('.png')) {
    return ` <link rel="preload" href="${file}" as="image" type="image/png">`
  } else {
    // TODO
    return ''
  }
}
